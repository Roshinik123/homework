1.add two number return the index
#include <stdio.h>
#include <stdlib.h>

int* twoSum(int* nums, int numsSize, int target, int* returnSize) {
    // Create an array to store the result indices
    int *result = (int*)malloc(2 * sizeof(int));
    
    // Iterate through the array
    for (int i = 0; i < numsSize; ++i) {
        for (int j = i + 1; j < numsSize+1; ++j) {
            if (nums[i] + nums[j] == target) {
                result[0] = i;
                result[1] = j;
                *returnSize = 2;
                return result;
            }
        }
    }
    
    // No solution found
    *returnSize = 0;
    return NULL;
}

int main() {
    int nums[] = {2, 7, 11, 15};
    int target = 17;
    int numsSize = sizeof(nums) / sizeof(nums[0]);
    int returnSize;
    
    int *result = twoSum(nums, numsSize, target, &returnSize);
    
    if (result != NULL) {
        printf("Output: [%d, %d]\n", result[0], result[1]);
        free(result);
    } else {
        printf("No valid solution found.\n");
    }
    
    return 0;
}
2.Remove duplicates in sorted array
#include <stdio.h>
int removeDuplicates(int* nums, int numsSize) {
    if (numsSize == 0) {
        return 0;
    }
    
    int j = 0;  // Pointer to track the position of the last unique element
    
    // Iterate through the array
    for (int i = 1; i < numsSize; ++i) {
        // If current element is different from previous unique element, move it forward
        if (nums[i] != nums[j]) {
            j++;
            nums[j] = nums[i];
        }
    }
    
    // Return the length of the array containing unique elements
    return j + 1;
}

int main() {
    int nums[] = {1, 1, 2, 3, 3, 4, 5, 5, 5, 6};
    int numsSize = sizeof(nums) / sizeof(nums[0]);
    
    // Remove duplicates
    int newSize = removeDuplicates(nums, numsSize);
    
    // Print the array after removing duplicates
    printf("Array with duplicates removed: ");
    for (int i = 0; i < newSize; ++i) {
        printf("%d ", nums[i]);
    }
    printf("\n");
    
    return 0;
}
